<?php
/**
 * Implements hook_theme().
 */
function wechat_scan_theme($existing, $type, $theme, $path) {
  return array(
    'wechat_scan' => array(
      'render element' => 'content',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wechat_scan_menu() {
  $items['wechat-scan/product/add'] = array(
    'page callback' => 'wechat_scan_product_add_form',
    'access callback' => 'wechat_scan_access',
    'access arguments' => array('product', NULL, 'add'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat_scan.forms.inc',
  );
  $items['wechat-scan/product/add2'] = array(
    'page callback' => 'wechat_scan_product_add_form2',
    'access callback' => 'wechat_scan_access',
    'access arguments' => array('product', NULL, 'add'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat_scan.forms.inc',
  );
  $items['wechat-scan/product/%wechat_scan_product/edit'] = array(
    'page callback' => 'wechat_scan_product_edit_form',
    'page arguments' => array(2),
    'access callback' => 'wechat_scan_access',
    'access arguments' => array('product', 2, 'edit'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat_scan.forms.inc',
  );

  $items['admin/structure/wechat_scan_product'] = array(
    'title' => '微信扫一扫设置',
    'description' => '微信用户设置，如：微信登录自动注册为某角色，刷新用户信息等。',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['wechat_scan_settings_form'],
    'access callback' => 'wechat_scan_access',
    'access arguments' => array('product', NULL, 'add'),
    'file' => 'wechat_scan.admin.inc',
  );
  $items['admin/structure/wechat_scan_product/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );


  $items['wechat-scan/product/add2'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wechat_scan_add_test'),
    'access callback' => 'wechat_scan_access',
    'access arguments' => array('product', NULL, 'add'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat_scan.pages.inc',
  );
  return $items;
}

function wechat_scan_product_load($id, $reset = FALSE) {
  $entities = wechat_scan_product_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

function wechat_scan_product_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wechat_scan_product', $ids, $conditions, $reset);
}


function wechat_scan_access($type, $entity = NULL, $op = NULL) {
  return TRUE;
}

/**
 * Implements hook_field_extra_fields().
 */
function wechat_scan_field_extra_fields() {
  $extra = array();
  $extra['wechat_scan_product']['wechat_scan_product'] = array(
    'form' => array(
      'title' => array(
        'label' => t('标题'),
        'description' => t('商品标题'),
        'weight' => -7,
      ),
      'keystandard' => array(
        'label' => t('编码类型'),
        'description' => t('编码类型'),
        'weight' => -7,
      ),
      'keystr' => array(
        'label' => t('编码内容'),
        'description' => t('编码内容'),
        'weight' => -6,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_entity_info().
 */
function wechat_scan_entity_info() {
  $return['wechat_scan_product'] = array(
    'label' => t('扫一扫商品信息'),
    'plural label' => t('扫一扫商品信息'),
    'description' => t('扫一扫商品信息.'),
    'entity class' => 'WechatScanProduct',
    'controller class' => 'EntityAPIController',
    'base table' => 'wechat_scan_product',
    'revision table' => 'wechat_scan_product_revision',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
      'revision' => 'vid',
    ),
    'bundles' => array(
      'wechat_scan_product' => array(
        'label' => t('扫一扫商品'),
        'admin' => array(
          'path' => 'admin/structure/wechat_scan_product',
          'access arguments' => array('administer users'),
        ),
      ),
    ),
    'module' => 'wechat_scan',
  );
  $return['wechat_scan_product_qrcode'] = array(
    'label' => t('扫一扫商品二维码'),
    'plural label' => t('扫一扫商品二维码'),
    'description' => t('扫一扫商品二维码.'),
    'entity class' => 'WechatScanProductQrcode',
    'controller class' => 'EntityAPIController',
    'base table' => 'wechat_scan_product_qrcode',
    'fieldable' => FALSE,
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
    ),
    'module' => 'wechat_scan',
  );


  return $return;
}

class WechatScanProduct extends Entity {
  public $id;
  public $uid;
  public $vid;
  public $title;
  public $created;
  public $changed;

  public $keystandard = 'ean13';
  public $keystr;

  //创建成功返回的PID
  public $pid;

  public $log = '';
  public $is_new_revision;

  function __construct($values = array()) {
    $this->is_new_revision = TRUE;
    parent::__construct($values, 'wechat_scan_product');
  }

  function save() {
    $this->changed = time();

    if (empty($this->created)) {
      $this->created = time();
    }

    if (empty($this->uid)) {
      global $user;
      $this->uid = $user->uid;
    }

    parent::save();
  }

  /**
   * @param $keystandard
   * @param $keystr
   * @todo 从微信更新数据
   */
  function update($info) {

  }
}

class WechatScanProductQrcode extends Entity {
  function __construct($values = array()) {
    parent::__construct($values, 'wechat_scan_product_qrcode');
  }

  function save() {
    parent::save();
  }
}


/**
 * Implements hook_tpl_api().
 */
function wechat_scan_tpl_api() {
  return array(
    'add-action-info' => array(
      'file' => array(
        'type' => 'inc',
        'module' => 'wechat_scan',
        'name' => 'wechat_scan.tpl_api'
      ),
      'callback' => 'wechat_scan_add_action_info_callback',
      'description' => '添加action_info信息',
      'args' => array(
        array(
          'name' => 'title',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '标题（管理时使用）.',
          'source' => array('data' => 'title'),
        ),
        array(
          'name' => 'type',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '类型.',
          'source' => array('data' => 'type'),
        ),
        array(
          'name' => 'data',
          'optional' => FALSE,
          'type' => 'array',
          'description' => '数据.',
          'source' => array('data' => 'data'),
        ),
      ),
    ),
    'add-scan-product' => array(
      'file' => array(
        'type' => 'inc',
        'module' => 'wechat_scan',
        'name' => 'wechat_scan.tpl_api'
      ),
      'callback' => 'wechat_scan_add_product_callback',
      'description' => '添加action_info信息',
      'args' => array(
        array(
          'name' => 'keystandard',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '标题（管理时使用）.',
          'source' => array('data' => 'keystandard'),
        ),
        array(
          'name' => 'keystr',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '类型.',
          'source' => array('data' => 'keystr'),
        ),
        array(
          'name' => 'brand_info',
          'optional' => FALSE,
          'type' => 'array',
          'description' => '数据.',
          'source' => array('data' => 'brand_info'),
        ),
      ),
    ),
    'get-scan-product-custom-qr' => array(
      'file' => array(
        'type' => 'inc',
        'module' => 'wechat_scan',
        'name' => 'wechat_scan.tpl_api'
      ),
      'callback' => 'wechat_scan_get_custom_qr_callback',
      'description' => '生成自定义二维码',
      'args' => array(
        array(
          'name' => 'keystandard',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '标题（管理时使用）.',
          'source' => array('data' => 'keystandard'),
        ),
        array(
          'name' => 'keystr',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '类型.',
          'source' => array('data' => 'keystr'),
        ),
        array(
          'name' => 'extinfo',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '数据.',
          'source' => array('data' => 'extinfo'),
        ),
        array(
          'name' => 'qrcode_size',
          'optional' => TRUE,
          'type' => 'int',
          'description' => '数据.',
          'default value' => 64,
          'source' => array('data' => 'qrcode_size'),
        ),
      ),
    ),
    'get-scan-product-qr' => array(
      'file' => array(
        'type' => 'inc',
        'module' => 'wechat_scan',
        'name' => 'wechat_scan.tpl_api'
      ),
      'callback' => 'wechat_scan_get_qr_callback',
      'description' => '生成扫一扫商品二维码，按类型',
      'args' => array(
        array(
          'name' => 'keystandard',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '商品编码格式.',
          'source' => array('data' => 'keystandard'),
        ),
        array(
          'name' => 'keystr',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '商品编码.',
          'source' => array('data' => 'keystr'),
        ),
        array(
          'name' => 'type',
          'optional' => FALSE,
          'type' => 'string',
          'description' => '码类型.',
          'source' => array('data' => 'type'),
        ),
        array(
          'name' => 'qrcode_size',
          'optional' => TRUE,
          'type' => 'int',
          'description' => '需要的码大小.',
          'default value' => 64,
          'source' => array('data' => 'qrcode_size'),
        ),
      ),
    ),
  );
}