<?php
/**
 * Implements hook_menu().
 */
function wechat_qr2_menu() {
  $items['qr/add'] = array(
    'title' => '微信二维码',
    'access callback' => 'wechat_qr2_access',
    'access arguments' => array('add_all'),
    'description' => '选择添加二维码.',
    'page callback' => 'wechat_qr2_add_page',
    'weight' => 10,
    'file' => 'wechat_qr2.pages.inc',
  );
  $items['qr/%wechat_qr2'] = array(
    'page callback' => 'wechat_qr2_view_page',
    'page arguments' => array(1),
    'access callback' => 'wechat_qr2_access',
    'access arguments' => array('view', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat_qr2.pages.inc',
  );
  $items['qr/%wechat_qr2/edit'] = array(
    'page callback' => 'wechat_qr2_edit_form',
    'page arguments' => array(1),
    'access callback' => 'wechat_qr2_access',
    'access arguments' => array('edit', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'file' => 'wechat_qr2.pages.inc',
  );
  $types = wechat_qr2_get_types();
  foreach ($types as $type) {
    //$type_url_str = str_replace('_', '-', $type->type);
    //参数看entity_info定义
    $items['qr/add/' . $type->type] = array(
      'title' => $type->label,
      'page callback' => 'wechat_qr2_add_form',
      'page arguments' => array($type->type),
      'access callback' => TRUE,
      'description' => $type->description,
      'weight' => $type->weight,
      'file' => 'wechat_qr2.pages.inc',
    );
  }


  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function wechat_qr2_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/content/qr') {
    $item = menu_get_item('qr/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function wechat_qr2_admin_paths() {
  $paths = array(
    'qr/*' => TRUE,
    'qr/*/edit' => TRUE,
    'qr/*/delete' => TRUE,
    'qr/add' => TRUE,
    'qr/add/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_field_extra_fields().
 */
function wechat_qr2_field_extra_fields() {
  $extra = array();
  foreach (wechat_qr2_get_types() as $type) {
    $extra['wechat_qr2'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => t('标题'),
          'description' => t('由Wechat Qr2模块提供'),
          'weight' => -7,
        ),
        'qr_key' => array(
          'label' => t('二维码KEY'),
          'description' => t('由Wechat Qr2模块提供'),
          'weight' => -7,
        ),
        'qr_type' => array(
          'label' => t('二维码类型'),
          'description' => t('由Wechat Qr2模块提供'),
          'weight' => -6,
        ),
        'expire' => array(
          'label' => t('二维码过期时间'),
          'description' => t('由Wechat Qr2模块提供'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'image' => array(
          'label' => t('二维码图片'),
          'description' => t('二维码图片'),
          'weight' => 0,
        ),
      )
    );
  }
  return $extra;
}

/**
 * Implements hook_rules_action_info().
 */
function wechat_qr2_rules_action_info() {
  $action['wechat_qr2_action_get_key'] = array(
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('返回二维码的真实KEY'),
    'base' => 'wechat_qr2_action_get_key',
    'parameter' => array(
      'event' => array(
        'type' => 'text',
        'label' => t('事件类型'),
        'description' => t('事件类型.'),
        'save' => TRUE,
      ),
      'qr_key' => array(
        'type' => 'text',
        'label' => t('二维码KEY'),
        'description' => t('二维码KEY.'),
        'save' => TRUE,
      ),
    ),
    'provides' => array(
      'key' => array(
        'type' => 'text',
        'label' => t('二维码KEY'),
        'save' => TRUE,
      ),
    ),
  );
  return $action;
}

function wechat_qr2_action_get_key($event, $qr_key) {
  switch ($event) {
    case 'SCAN': {
      break;
    }
    case 'subscribe': {
      $qr_key = substr($qr_key, 8);
      break;
    }
  }
  watchdog('key', $qr_key);
  return array('key' => $qr_key);
}

/**
 * Implements hook_entity_info().
 */
function wechat_qr2_entity_info() {
  $return['wechat_qr2'] = array(
    'label' => t('微信二维码'),
    'plural label' => t('微信二维码'),
    'description' => t('微信二维码.'),
    'entity class' => 'WechatQr2',
    'controller class' => 'EntityAPIController',
    'base table' => 'wechat_qr2',
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('微信二维码'),
        'custom settings' => FALSE,
      ),
    ),
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'wechat_qr2_access',
    'module' => 'wechat_qr2',
    'metadata controller class' => 'WechatQr2MetadataController'
  );
  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('wechat_qr2_type', 'w')
    ->fields('w')
    ->execute()
    ->fetchAllAssoc('type');

  foreach ($types as $type => $info) {
    $return['wechat_qr2']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/wechat_qr2/manage/%wechat_qr2_type',
        'real path' => 'admin/structure/wechat_qr2/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer wechat qr2'),
      ),
    );
  }

  $return['wechat_qr2_type'] = array(
    'label' => t('二维码使用场景'),
    'plural label' => t('二维码使用场景'),
    'description' => t('二维码使用场景.'),
    'entity class' => 'WechatQr2Type',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'wechat_qr2_type',
    'fieldable' => FALSE,
    'bundle of' => 'wechat_qr2',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'wechat_qr2_type_access',
    'module' => 'wechat_qr2',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/wechat_qr2',
      'file' => 'wechat_qr2_type.admin.inc',
      'controller class' => 'WechatQr2TypeUIController',
    ),
  );

  return $return;
}

function wechat_qr2_access($op, $entity = NULL, $account = NULL) {
  if (user_access('administer wecaht qr2', $account)) {
    return TRUE;
  }
  if ($op == 'create' || $op == 'update') {
    $op = 'edit';
  }
  // Allow modules to grant / deny access.
  $access = module_invoke_all('wechat_qr2_access', $op, $entity, $account);

  // Only grant access if at least one module granted access and no one denied
  // access.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_wechat_qr2_access().
 */
function wechat_qr2_wechat_qr2_access($op, WechatQr2 $entity = NULL, $account = NULL) {
  if (isset($entity) && ($type_name = $entity->type) && $op != 'delete') {
    if (user_access("$op any $type_name wecaht qr2", $account)) {
      return TRUE;
    }
    $account = isset($account) ? $account : $GLOBALS['user'];
    if (isset($entity->uid) && $entity->uid == $account->uid && user_access("$op own $type_name wecaht qr2", $account)) {
      return TRUE;
    }
  }
}

function wechat_qr2_type_access() {
  return user_access('administer wecaht qr2 type');
}


/**
 * Implements hook_permission().
 */
function wechat_qr2_permission() {
  $permissions = array(
    'administer wecaht qr2' => array(
      'title' => t('管理所有二维码'),
      'description' => t('管理员权限.'),
    ),
    'administer wecaht qr2 type' => array(
      'title' => t('管理二维码类型'),
      'description' => t('管理员权限.'),
    ),
  );
  // Generate per profile type permissions.
  foreach (wechat_qr2_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit own $type_name wecaht qr2" => array(
        'title' => t('%type_name: 编辑自己的二维码', array('%type_name' => $type->label)),
      ),
      "edit any $type_name wecaht qr2" => array(
        'title' => t('%type_name: 编辑所有二维码', array('%type_name' => $type->label)),
      ),
      "view own $type_name wecaht qr2" => array(
        'title' => t('%type_name: 查看自己的二维码', array('%type_name' => $type->label)),
      ),
      "view any $type_name wecaht qr2" => array(
        'title' => t('%type_name: 查看所有二维码', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}


function wechat_qr2_load($id, $reset = FALSE) {
  $entity = wechat_qr2_load_multiple(array($id), array(), $reset);
  return reset($entity);
}

function wechat_qr2_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wechat_qr2', $ids, $conditions, $reset);
}

function wechat_qr2_type_load($type) {
  return wechat_qr2_get_types($type);
}

function wechat_qr2_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('wechat_qr2_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

class WechatQr2 extends Entity {
  public $id;
  public $type;
  public $title;
  public $uid;
  public $update_time;
  public $create_time;


  public $qr_key;
  public $qr_type;
  public $expire;

  public $ticket;


  public function __construct($values = array()) {
    if (isset($values['type']) && is_object($values['type'])) {
      $values['type'] = $values['type']->type;
    }
    parent::__construct($values, 'wechat_qr2');
  }

  protected function defaultUri() {
    return array('path' => 'qr/' . $this->id);
  }

  public function  getUrl($ticket = NULL) {
    $output = '';
    $output .= '<img src="' . 'https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=' . $this->ticket . '"/>';
    return $output;
  }

  protected function makeKey() {
    $old_key = variable_get(__CLASS__ . __FUNCTION__, 1);
    if ($old_key > 4294967295) {
      $new_key = 1;
    }
    else {
      $new_key = $old_key + 1;
    }
    variable_set(__CLASS__ . __FUNCTION__, $new_key);

    return $old_key;
  }

  public function  save() {

    //临时二维码key自动生成
    if ($this->qr_type == 0 && empty($this->qr_key)) {
      $this->qr_key = $this->makeKey();
    }
    if ($this->qr_type == 1 && is_numeric($this->qr_key)) {
      return;
    }
    $this->update_time = time();

    if (!isset($this->create_time)) {
      $this->create_time = time();
    }

    if (!isset($this->ticket)) {
      $we_obj = wechat_api_init_wechatobj();
      $ticket_array = $we_obj->getQRCode($this->qr_key, $this->qr_type, $this->expire);
      if (!empty($ticket_array['ticket'])) {
        $this->ticket = $ticket_array['ticket'];
      }
    }
    parent::save();
  }
}

class WechatQr2MetadataController extends EntityDefaultMetadataController {
  public function entityPropertyInfo() {
    $info = parent::entityPropertyInfo();
    $properties = &$info[$this->type]['properties'];
//    dpm($properties);
    $properties['type'] = array(
        'label' => t('使用场景类型'),
        'type' => 'wechat_qr2_type',
        'getter callback' => 'entity_property_getter_method',
        'setter callback' => 'entity_property_setter_method',
        'setter permission' => 'administer profiles',
        'required' => TRUE,
        'description' => t('The profile type.'),
      ) + $properties['type'];

    $properties['title'] = array(
      'label' => t('标题'),
      'type' => 'text',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer profiles',
      'schema field' => 'title',
      'required' => TRUE,
      'description' => t('The profile type.'),
    );
    $properties['user'] = array(
      'label' => t('UID'),
      'type' => 'user',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat response message',
      'schema field' => 'uid',
      'required' => TRUE,
      'description' => t('Create time of wechat response message.'),
    );

    $properties['qr_key'] = array(
      'label' => t('QR Key'),
      'type' => 'text',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer profiles',
      'schema field' => 'qr_key',
      'required' => TRUE,
      'description' => t('QR Key.'),
    );
    $properties['qr_type'] = array(
      'label' => t('二维码类型'),
      'type' => 'boolean',
      'description' => t('是否为永久二维码.'),
      'required' => TRUE,
      'getter callback' => 'entity_metadata_wechat_qr2_get_properties',
    );

    $properties['expire'] = array(
      'label' => t('过期时间'),
      'type' => 'integer',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer profiles',
      'schema field' => 'expire',
      'description' => t('临时二维码过期时间.'),
    );


    return $info;
  }
}

function entity_metadata_wechat_qr2_get_properties($entity, array $options, $name, $entity_type) {
  switch ($name) {
    case 'qr_type':
      return $entity->qr_type;
  }
  return FALSE;
}

class WechatQr2Type extends Entity {


  public $type;
  public $label;
  public $weight = 0;
  public $description;

  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_qr2_type');
  }

  /**
   * Returns whether the wechat_request_message type is locked, thus may not be deleted or renamed.
   *
   * Wechat_request_message types provided in code are automatically treated as locked, as well
   * as any fixed wechat_request_message type.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }


  /**
   * Overrides Entity::save().
   */
  public function save() {
    parent::save();
    // Clear field info caches such that any changes to extra fields get
    // reflected.
    field_info_cache_clear();
  }
}