<?php
define('WUUPRE', 'wx_');
/**
 * Implements hook_views_api().
 */
function wechat_user_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_menu().
 */
function wechat_user_menu() {
  //认证路径
  $items['wechat/auth'] = array(
    'title' => 'Wechat Login',
    'page callback' => 'wechat_user_auth',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  //自定义登录回调
  $items['wechat/user/login'] = array(
    'title' => 'Wechat Login',
    'page callback' => 'wechat_user_login_two',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/wechat_user'] = array(
    'title' => '微信用户设置',
    'description' => '微信用户设置，如：微信登录自动注册为某角色，刷新用户信息等。',
    'page callback' => 'wechat_user_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('wechat user update user info'),
    //'file' => 'wechat_user.forms.inc',
  );

  $items['admin/structure/wechat_user/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/wechat/user/%wechat_user/edit'] = array(
    'title' => '编辑用户资料',
    'description' => '微信用户设置，如：微信登录自动注册为某角色，刷新用户信息等。',
    'page callback' => 'wechat_user_edit_form',
    'page arguments' => array(3),
    'access arguments' => array('wechat user update user info'),
    'weight' => -10,
    'file' => 'wechat_user.forms.inc',
  );
  $items['admin/structure/wechat_user/user-group/add'] = array(
    'title' => '添加用户分组',
    'description' => '微信用户设置，如：微信登录自动注册为某角色，刷新用户信息等。',
    'page callback' => 'wechat_user_group_add_form',
    'access arguments' => array('wechat user update user info'),
    'weight' => -10,
    'file' => 'wechat_user.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/wechat_user/user-group/%wechat_user_group/edit'] = array(
    'title' => '编辑用户分组',
    'description' => '微信用户设置，如：微信登录自动注册为某角色，刷新用户信息等。',
    'page callback' => 'wechat_user_group_edit_form',
    'page arguments' => array(4),
    'access arguments' => array('wechat user update user info'),
    'weight' => -10,
    'file' => 'wechat_user.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function wechat_user_create_login_url($goto, $error, $state, $type = 'snsapi_base') {
  return "/wechat/user/login?goto={$goto}&error={$error}&state={$state}&type={$type}";
}


function wechat_user_settings_page() {
  $output = '';
  $form = drupal_get_form('wechat_user_op_user');
  $output .= render($form);
  return $output;
}


function wechat_user_op_user($form, &$form_state) {
  $form['group'] = array(
    '#type' => 'fieldset',
    '#title' => t('分组管理'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['group']['update_group'] = array(
    '#type' => 'submit',
    '#submit' => array('wechat_user_group_update_group'),
    '#value' => t('同步分组数据'),
  );

  $form['openid'] = array(
    '#type' => 'fieldset',
    '#title' => t('更新单个用户信息'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['openid']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('微信用户OpenId'),
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => t('填写需要更新的微信用户OpenId，不填写则更新所有微信用户.'),
  );
  $form['openid']['update_user_info'] = array(
    '#type' => 'submit',
    '#submit' => array('wechat_user_openid_update_user_info'),
    '#value' => t('更新用户信息'),
  );

  $form['update'] = array(
    '#type' => 'fieldset',
    '#title' => t('同步当前站点用户信息'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['update']['update_user_info'] = array(
    '#type' => 'submit',
    '#submit' => array('wechat_user_update_update_user_info'),
    '#value' => t('同步当前站点用户信息'),
  );

  $form['pull'] = array(
    '#type' => 'fieldset',
    '#title' => t('同步所有用户信息'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['pull']['pull_user_info'] = array(
    '#type' => 'submit',
    '#submit' => array('wechat_user_pull_pull_user_info'),
    '#value' => t('同步所有用户信息'),
  );
  return $form;
}

function wechat_user_group_update_group($form, &$form_state) {
  $wechatObj = wechat_api_init_wechatobj();
  $groups = $wechatObj->getGroup();
  foreach ($groups['groups'] as $group) {
    $values = array();
    $values['gid'] = $group['id'];
    $values['name'] = $group['name'];
    $values['count'] = $group['count'];
    $groupObj = new WechatUserGroup($values);
    $groupObj->save();
  }
}

function wechat_user_openid_update_user_info($form, &$form_state) {
  $openid = $form_state['values']['openid']['value'];
  if (!empty($openid)) {
    wechat_user_registry_user($openid);
  }
}


function wechat_user_pull_pull_user_info($form, &$form_state) {

  $wechat_obj = wechat_api_init_wechatobj();
  $user_list = $wechat_obj->getUserList();
  $openid_list = $user_list['data']['openid'];

  //后期改为批处理操作防止超时。
  //wechat_user_user_registry($openid_list);
  $operations = array();
  foreach ($openid_list as $openid) {
    $operations[] = array(
      'wechat_user_registry_user',
      array($openid)
    );
  }


  batch_set(array(
    'operations' => $operations,
    'title' => t('微信用户信息更新'),
  ));

}

function wechat_user_update_update_user_info($form, &$form_state) {
  $entities = wechat_user_load_multiple(FALSE);
  $operations = array();
  foreach ($entities as $entity) {
    $operations[] = array(
      'wechat_user_registry_user',
      array($entity->openid)
    );
  }
  batch_set(array(
    'operations' => $operations,
    'title' => t('更新当前站点的微信用户信息'),
  ));
}

function wechat_user_login_two() {

  $goto = $_GET['goto'];
  $error = $_GET['error'];
  $state = $_GET['state'];
  $type = $_GET['type'];

  $we_obj = wechat_api_init_wechatobj();
  $auth_url = $we_obj->getOauthRedirect(url('wechat/auth', array(
    'absolute' => TRUE,
    'query' => array('destination' => $goto, 'error' => $error)
  )), $state, $type);
  drupal_goto($auth_url);
}

function wechat_user_user_registry($openid_list) {
  foreach ($openid_list as $user_open_id) {
    wechat_user_registry_user($user_open_id);
  }
}

/**
 * @param $user_open_id
 * @return bool|mixed|\stdClass
 * @throws \Exception
 * 注册用户，没有关注不注册
 * 2016.1.20 调整不在注册为站点user，只存储为 wechat_user 实体
 */
function wechat_user_registry_user($user_open_id) {
  $wechat_obj = wechat_api_init_wechatobj();
  $user_info = $wechat_obj->getUserInfo($user_open_id);
  if ($user_info['subscribe']) {//判断是否关注
    //根据openid读取WechatUser
    $wechatUsers = wechat_user_load_multiple(FALSE, array('openid' => $user_open_id));
    if (!empty($wechatUsers)) {
      $wechatUser = reset($wechatUsers);
    }
    else {
      $wechatUser = new WechatUser();
    }
    //注入新资料
    foreach ($user_info as $key => $value) {
      $wechatUser->{$key} = $value;
    }
    //保存
    $wechatUser->save();
    return $wechatUser;
  }
  return FALSE;
}

/**
 * @param \WechatUser $wechatUser
 * @param \stdClass $user
 * WechatUser 和 User 绑定
 */
function wechat_user_bind_user(WechatUser $wechatUser, stdClass $user) {
  $wechatUser->uid = $user->uid;
  $wechatUser->save();
}

/**
 * Implements hook_token_info_alter().
 */
function wechat_user_token_info_alter(&$data) {
  $data['tokens']['user']['wechat_user_nickname'] = array(
    'name' => '用户绑定的微信的昵称',
    'description' => '用户绑定的微信的昵称'
  );
}

/**
 * Implements hook_tokens().
 */
function wechat_user_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'wechat_user_nickname':
          // In the case of hook user_presave uid is not set yet.
          $wechatUser = WechatUser::loadByUid($account->uid);
          $replacements[$original] = !empty($wechatUser) ? $wechatUser->nickname : $account->name;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_entity_info().
 */
function wechat_user_entity_info() {
  $return['wechat_user'] = array(
    'label' => t('Wechat user'),
    'plural label' => t('Wechat users'),
    'description' => t('Wechat users.'),
    'entity class' => 'WechatUser',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'WechatUserViewsController',
    'base table' => 'wechat_user',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'nickname'
    ),
    'access callback' => 'wechat_user_access',
    'module' => 'wechat_user',
    'metadata controller class' => 'WechatUserMetadataController',
    'bundles' => array(
      'wechat_user' => array(
        'label' => t('Wechat user'),
        'admin' => array(
          'path' => 'admin/structure/wechat_user',
          'access arguments' => array('administer users'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('User account'),
        'custom settings' => FALSE,
      ),
    ),
  );
  $return['wechat_user_group'] = array(
    'label' => t('微信用户分组'),
    'plural label' => t('微信用户分组'),
    'description' => t('微信用户分组.'),
    'entity class' => 'WechatUserGroup',
    'controller class' => 'EntityAPIController',
    'base table' => 'wechat_user_group',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name'
    ),
    'module' => 'wechat_user',
  );

  return $return;
}

function wechat_user_load($id, $reset = FALSE) {
  $entities = wechat_user_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

function wechat_user_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  $entities = entity_load('wechat_user', $ids, $conditions, $reset);
  return $entities;
}

function wechat_user_group_load($id, $reset = FALSE) {
  $entities = wechat_user_group_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

function wechat_user_group_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wechat_user_group', $ids, $conditions, $reset);
}

function wechat_user_load_by_openid($openid) {
  $entities = wechat_user_load_multiple(FALSE, array('openid' => $openid));
  return reset($entities);
}

function wechat_user_access($op, $wechat_user = NULL, $account = NULL) {
  if (user_access('administer wechat user', $account)) {
    return TRUE;
  }
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function wechat_user_permission() {
  return array(
    'wechat user update user info' => array(
      'title' => t('更新微信用户信息'),
      'description' => t('更新微信用户信息.'),
    ),
  );
}

function wechat_user_get_wechat_user_by_openid($openid) {
  $wechat_user = wechat_user_load_multiple(FALSE, array('openid' => $openid));
  if (!empty($wechat_user)) {
    return reset($wechat_user);
  }
  return FALSE;
}

function wechat_user_get_user_by_openid($openid) {
  $wechat_user = wechat_user_load_multiple(FALSE, array('openid' => $openid));
  if (!empty($wechat_user)) {
    $wechat_user = reset($wechat_user);
    return user_load($wechat_user->uid);
  }
  return FALSE;
}

function _wechat_user_login($uid) {
  global $user;
  $user = user_load($uid);
  drupal_session_regenerate();
}

/**
 * @todo 微信授权认证回调
 * state 操作类型。
 * new 需要注册新的user ；
 * update 同步当前登录的用户；
 * default 默认值，只注册WechatUser。
 */
function wechat_user_auth() {
  $state = isset($_GET['state']) ? $_GET['state'] : 'default';
  $error = isset($_GET['error']) ? $_GET['error'] : '';
  $destination = isset($_GET['destination']) ? $_GET['destination'] : '';
  $code = isset($_GET['code']) ? $_GET['code'] : '';

  try {
    global $user;
    //@todo 如果已经登录跳转
    if ($user->uid) {
      drupal_goto($destination);
    }

    $wechat_obj = wechat_api_init_wechatobj();

    //@todo 判断是否出错了。到错误页面
    if ((!$code) || (!$state)) { // error
      drupal_goto($error);
    }
    $access_data = $wechat_obj->getOauthAccessToken();

    //@todo 微信返回错误
    if (empty($access_data)) {
      drupal_goto($error);
    }

    //@todo 尝试登录
    $openid = $access_data['openid'];
    $wechat_user = wechat_user_load_multiple(FALSE, array('openid' => $openid));
    if (!empty($wechat_user)) {
      $wechat_user = reset($wechat_user);
      if ($uid = $wechat_user->uid) {
        global $user;
        $user = user_load($uid);
        drupal_session_regenerate();
        rules_invoke_event('wechat_user_wechat_login', $wechat_user, $user);
        drupal_goto($destination);
      }
    }


    //@todo 判断操作类型
    if ($state == 'new') {

      //@todo 生成之前判断是否存在

      // auto register
      $user_name = 'wechat_' . $access_data['openid'];
      $u = user_load_by_name($user_name);
      if (empty($u)) {
        $new_user = array(
          'name' => $user_name,
          'pass' => user_password(),
          'status' => 1,
        );
        $account = user_save(NULL, $new_user);
      }
      else {
        $account = $u;
      }


      $uid = $account->uid;
      global $user;
      $user = user_load($uid);
      drupal_session_regenerate();
      $wechat_user = wechat_user_registry_user($access_data['openid']);
      if ($wechat_user instanceof WechatUser) {
        $wechat_user->uid = $uid;
        $wechat_user->save();
      }
      rules_invoke_event('wechat_user_wechat_login', $wechat_user, $user);
      drupal_goto($destination);
    }

    drupal_goto($error);
  } catch (Exception $e) {
    watchdog_exception('微信授权登录', $e);
    drupal_goto($error);
  }
}

/**
 * Implements hook_rules_event_info().
 */
function wechat_user_rules_event_info() {
  $events['wechat_user_wechat_login'] = array(
    'label' => t('微信登录事件'),
    'group' => t('微信'),
    'variables' => array(
      'wechat_user' => array(
        'type' => 'wechat_user',
        'label' => t('Wechat User'),
      ),
      'user' => array(
        'type' => 'user',
        'label' => t('User'),
      ),
    ),
  );
  return $events;
}

function wechat_user_login_by_openid($openid) {
  $wechat_user = wechat_user_load_multiple(FALSE, array('openid' => $openid));
  if (!empty($wechat_user)) {
    $wechat_user = reset($wechat_user);
    if ($uid = $wechat_user->uid) {
      global $user;
      $user = user_load($uid);
      drupal_session_regenerate();
      return TRUE;
    }
  }
  return FALSE;
}

class WechatUserGroup extends Entity {
  public $id;
  public $gid;
  public $name;
  public $count;

  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_user_group');
  }

  function  loadByGid($gid) {
    $entities = wechat_user_group_load_multiple(FALSE, array('gid' => $gid));
    if (!empty($entities)) {
      return reset($entities);
    }
    return $this;
  }

  static function  Options() {
    $return = array();
    $entities = wechat_user_group_load_multiple(FALSE);
    foreach ($entities as $entity) {
      $return[$entity->id] = "( 分组ID: {$entity->gid} ) " . $entity->name;
    }
    return $return;
  }

  static function  exists($gid) {
    $entities = wechat_user_group_load_multiple(FALSE, array('gid' => $gid));
    if (!empty($entities)) {
      return reset($entities);
    }
    return FALSE;
  }

  /**
   * 和微信同步
   */
  function  push($op) {
    switch ($op) {
      case 'add': {
        $wObj = wechat_api_init_wechatobj();
        $r = $wObj->createGroup($this->name);
        $this->gid = $r['group']['id'];
        $this->save();
        break;
      }
      case 'edit': {
        $wObj = wechat_api_init_wechatobj();
        $r = $wObj->updateGroup($this->gid, $this->name);
        $this->save();
        break;
      }
    }
  }

  function save() {
    $entity = $this->loadByGid($this->gid);
    $this->id = $entity->id;
    parent::save();
  }
}

class WechatUser extends Entity {
  public $id;
  public $uid;

  public $subscribe;
  public $openid;
  public $nickname;

  public $sex;
  public $city;
  public $country;
  public $province;
  public $language;
  public $headimgurl;
  public $subscribe_time;
  public $unionid;
  public $remark;
  public $groupid;

  /**
   * 同步用户备注和分组
   */
  function  push() {
    $wObj = wechat_api_init_wechatobj();
    $wObj->updateUserRemark($this->openid, $this->remark);
    $wObj->updateGroupMembers($this->group($this->groupid), $this->openid);
    $this->save();
  }

  function  group($id) {
    return empty($group = wechat_user_group_load($id)) ? 0 : $group->gid;
  }

  /**
   * @param $uid
   * @return static
   * 通过UID调取WechatUser
   */
  static function loadByUid($uid) {
    $wechat = wechat_user_load_multiple(FALSE, array('uid' => $uid));
    if (empty($wechat)) {
      return FALSE;
    }
    return reset($wechat);
  }

  public function setUser($account) {
    $this->uid = is_object($account) ? $account->uid : $account;
  }

  public function  openid() {
    return $this->openid;
  }


  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_user');
  }

  function nickname() {
    return $this->nickname;
  }

  public function save() {
    try {
      if ($group = WechatUserGroup::exists($this->groupid)) {
        $this->groupid = $group->id;
      }
      parent::save();
    } catch (Exception $e) {
      $this->nickname = '微信昵称无法识别';
      parent::save();
    }
  }

}

class WechatUserMetadataController extends EntityDefaultMetadataController {

  public function entityPropertyInfo() {
    $info = parent::entityPropertyInfo();
    $properties = &$info[$this->type]['properties'];

    $properties['user'] = array(
      'type' => 'user',
      'label' => t('User'),
      'description' => t('headimgurl of wechat user.'),
      'setter callback' => 'entity_property_setter_method',
      'setter permission' => 'administer wechat user',
      'schema field' => 'uid',
      'required' => TRUE,
    );

    $properties['nickname'] = array(
      'type' => 'text',
      'label' => t('微信昵称'),
      'description' => t('headimgurl of wechat user.'),
      'getter callback' => 'entity_property_getter_method',
      'setter permission' => 'administer wechat user',
      'schema field' => 'nickname',
      'required' => TRUE,
    );

    $properties['groupid'] = array(
      'type' => 'wechat_user_group',
      'label' => t('用户分组'),
      'description' => t('关联用户分组信息.'),
      'getter callback' => 'entity_property_getter_method',
      'setter callback' => 'entity_property_setter_method',
      'setter permission' => 'administer wechat user',
      'schema field' => 'groupid',
    );

    $properties['headimgurl'] = array(
      'type' => 'text',
      'label' => t('headimgurl'),
      'description' => t('headimgurl of wechat user.'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'headimgurl',
    );

    $properties['subscribe_time'] = array(
      'type' => 'date',
      'label' => t('Subscribe time'),
      'description' => t('Subscribe time of wechat user.'),
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'subscribe_time',
      'required' => TRUE,
    );

    return $info;
  }
}

class WechatUserViewsController extends EntityDefaultViewsController {
  public function views_data() {
    $data = parent::views_data();
    $data['wechat_user']['nickname']['field']['handler'] = 'views_handler_field_nickname';
    return $data;
  }
}

class views_handler_field_nickname extends views_handler_field {
  public function  render($values) {
    return $values->wechat_user_nickname;
  }
}
